{
    "question": "Suppose that you are given a list of integers and asked to create a Python generator that yields the factorial of each integer in the list. Consider the following code snippet: \n ```python\ndef factorial_gen(list): \n    for num in list: \n        factorial = 1 \n        for i in range(1, num + 1): \n            factorial *= i \n        yield factorial \n```\nThis generator doesn't take full advantage of the benefits offered by Python generators such as having lower memory usage and being faster than a list comprehension in most cases. Can you rewrite the code using a generator expression rather than a generator function?",
    "choices": [
        {
            "choice": "```python\nfactorial_gen = (reduce(lambda x, y: x*y, range(1, num+1)) for num in list) \n```",
            "correct": "true"
        },
        {
            "choice": "```python\nfactorial_gen = [reduce(lambda x, y: x*y, range(1, num+1)) for num in list] \n```",
            "correct": "false"
        },
        {
            "choice": "```python\nfactorial_gen = [factorial(num) for num in list] \n```",
            "correct": "false"
        }
    ]
}